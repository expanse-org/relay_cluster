// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
)

var _ = (*ringSubmitInfoMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RingSubmitInfoEvent) MarshalJSON() ([]byte, error) {
	type RingSubmitInfoEvent struct {
		SubmitInfoId     int
		Miner            common.Address
		ProtocolAddress  common.Address
		Ringhash         common.Hash
		UniqueId         common.Hash
		ProtocolData     string
		ProtocolGas      *Big
		ProtocolUsedGas  *Big
		ProtocolGasPrice *Big
		ValidSinceTime   int64
	}
	var enc RingSubmitInfoEvent
	enc.SubmitInfoId = r.SubmitInfoId
	enc.Miner = r.Miner
	enc.ProtocolAddress = r.ProtocolAddress
	enc.Ringhash = r.Ringhash
	enc.UniqueId = r.UniqueId
	enc.ProtocolData = r.ProtocolData
	enc.ProtocolGas = (*Big)(r.ProtocolGas)
	enc.ProtocolUsedGas = (*Big)(r.ProtocolUsedGas)
	enc.ProtocolGasPrice = (*Big)(r.ProtocolGasPrice)
	enc.ValidSinceTime = r.ValidSinceTime
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RingSubmitInfoEvent) UnmarshalJSON(input []byte) error {
	type RingSubmitInfoEvent struct {
		SubmitInfoId     *int
		Miner            *common.Address
		ProtocolAddress  *common.Address
		Ringhash         *common.Hash
		UniqueId         *common.Hash
		ProtocolData     *string
		ProtocolGas      *Big
		ProtocolUsedGas  *Big
		ProtocolGasPrice *Big
		ValidSinceTime   *int64
	}
	var dec RingSubmitInfoEvent
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.SubmitInfoId != nil {
		r.SubmitInfoId = *dec.SubmitInfoId
	}
	if dec.Miner != nil {
		r.Miner = *dec.Miner
	}
	if dec.ProtocolAddress != nil {
		r.ProtocolAddress = *dec.ProtocolAddress
	}
	if dec.Ringhash != nil {
		r.Ringhash = *dec.Ringhash
	}
	if dec.UniqueId != nil {
		r.UniqueId = *dec.UniqueId
	}
	if dec.ProtocolData != nil {
		r.ProtocolData = *dec.ProtocolData
	}
	if dec.ProtocolGas != nil {
		r.ProtocolGas = (*big.Int)(dec.ProtocolGas)
	}
	if dec.ProtocolUsedGas != nil {
		r.ProtocolUsedGas = (*big.Int)(dec.ProtocolUsedGas)
	}
	if dec.ProtocolGasPrice != nil {
		r.ProtocolGasPrice = (*big.Int)(dec.ProtocolGasPrice)
	}
	if dec.ValidSinceTime != nil {
		r.ValidSinceTime = *dec.ValidSinceTime
	}
	return nil
}
